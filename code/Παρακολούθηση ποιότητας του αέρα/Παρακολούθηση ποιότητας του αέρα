/*
 * Arduino IoT
 * 1) Μέτρηση τιμών θερμοκρασίας-υγρασίας και συγκέντρωσης αερίων CO2 - tVOC 
 * 2) Εμφάνιση των τιμών σε οθόνη LCD
 * 3) Σύνδεση στο WiFi και αποστολή των τιμών στο website thingspeak.com
 * 4) Λειτουργία ανεμιστήρα όταν κάνει ζέστη
*/

// Επειδή η μοναδική σειριακή θύρα του UNO χρησιμοποιείται από το serial monitor, 
// για τη σύνδεση του WiFi module με το arduino απαιτείται προσομοίωση σειριακής θύρας στα pin 6,7
#ifndef HAVE_HWSERIAL1
#include "SoftwareSerial.h"
SoftwareSerial Serial1(6, 7); // Σύνδεση ESP8266 με Arduino: ΤΧ->6, RX->7 
#endif

// Η βιβλιοθήκη για το ESP8266
#include "WiFiEsp.h"
// Δημιουργία ενός αντικειμένου Ethernet client
WiFiEspClient client;

// Κωδικοί WiFi
char ssid[] = "ΧΧΧΧΧΧΧΧΧ";     // στη θέση των X γράψτε το WiFi SSID (name)
char pass[] = "ΧΧΧΧΧΧΧΧΧ";     // στη θέση των X γράψτε το WiFi password
int status = WL_IDLE_STATUS;   // η κατάσταση του WiFi

// IP του thingspeak.com
char server[] = "184.106.153.149";
// Το "Write API Key" του λογαριασμού σας στο thingspeak
char writeKey[] = "XXXXXXXXXXXXXXXX";

// H βιβλιοθήκη για το δίαυλο I2C bus, ο οποίος χρησιμοποιείται από τον αισθητήρα αερίων
#include <Wire.h>
// Η βιβλιοθήκη για την οθόνη LCD
#include <LiquidCrystal.h>

// Η βιβλιοθήκη για τον αισθητήρα αερίων
#include "SparkFunCCS811.h"
#define CCS811_ADDR 0x5B    // Η default διεύθυνση I2C
//#define CCS811_ADDR 0x5A  // Εναλλακτική διεύθυνση I2C (αν η default είναι δεσμευμένη)

// Ο αισθητήρας αερίων
CCS811 mySensor(CCS811_ADDR);
// Η οθόνη LCD
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);    // οι συνδέσεις της οθόνης LCD

// Η βιβλιοθήκη για τον αισθητήρα θερμοκρασίας-υγρασίας
#include "DHT.h"
#define DHTPIN 13       // Το pin στο οποίο συνδέεται ο αισθητήρας DHT
#define DHTTYPE DHT11   // Ο τύπος του αισθητήρα
// O αισθητήρας θερμοκρασίας-υγρασίας
DHT dht(DHTPIN, DHTTYPE);

// Τα pin όπου συνδέεται το μοτέρ του ανεμιστήρα οροφής
int INA = 9;
int INB = 8;

// μεταβλητές για θερμοκρασία και υγρασία
float tem;
float hum;
// μεταβλητές για διοξείδιο του άνθρακα και πτητικές οργανικές ενώσεις
int co2;
int tvoc;

void setup()
{
  // αρχικοποίηση σειριακής θύρας για monitor
  Serial.begin(9600);
  // αρχικοποίηση σειριακής θύρας για ESP module (software serial)
  Serial1.begin(9600);
  // αρχικοποίηση ESP module
  WiFi.init(&Serial1);

  // έλεγχος για την ύπαρξη του ESP module (shield)
  if( WiFi.status() == WL_NO_SHIELD )
  {
    Serial.println("WiFi shield not present");
    // τέλος...
    while(true);
  }

  // προσπάθεια σύνδεσης στο δίκτυο WiFi
  while( WiFi.status() != WL_CONNECTED )
  {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    // σύνδεση με WPA/WPA2
    status = WiFi.begin(ssid, pass);
  }

  // επιτυχής σύνδεση
  Serial.println("You're connected to the wifi");
  Serial.println();

  // εμφάνιση μηνυμάτων στην οθόνη LCD
  lcd.begin(16,2);
  lcd.setCursor(0, 0);
  lcd.print("1o EPAL TRIKALON");
  lcd.setCursor(0, 1);
  lcd.println("Gas Sensor & LCD");

  // αρχικοποίηση I2C hardware
  Wire.begin();

  // αρχικοποίηση αισθητήρα θερμοκρασίας-υγρασίας  
  dht.begin();
  
  // αρχικοποίηση αισθητήρα αερίων
  if( mySensor.begin() == false )
  {
    lcd.println("CCS811 Error...");
    while (1);    // αν εμφανιστεί πρόβλημα, τέλος...
  }

  // ορισμός pin εξόδου για τον ανεμιστήρα
  pinMode(INA, OUTPUT);
  pinMode(INB, OUTPUT);   
}


void loop()
{
  // Αν υπάρχουν εισερχόμενα μηνύματα από τον server, εμφάνισέ τα
  while( client.available() )
  {
    char c = client.read();
    Serial.write(c);
  }

  // διάβασε θερμοκρασία (Celsius) και υγρασία
  tem = dht.readTemperature();
  hum = dht.readHumidity();


/* Εμφάνιση μηνύματων στο serial monitor (για debugging)  
  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.println(F("°C "));
*/

  // Εμφάνισε θεμοκρασία-υγρασία στην LCD οθόνη
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Hum:");
  lcd.print((int)hum);
  lcd.print(F("%-"));
  lcd.print(tem);
  lcd.print(F("oC"));

  
  // Έλεγξε αν ο αισθητήρας αερίων έχει δεδομένα
  if( mySensor.dataAvailable() )
  {
    // διάβασε και υπολόγισε τα αποτελέσματα από τον αισθητήρα
    mySensor.readAlgorithmResults();
    co2 = mySensor.getCO2();
    tvoc = mySensor.getTVOC();

    // εμφάνισε το υπολογισμένο ως ισοδύναμο του CO2 στην οθόνη LCD
    lcd.setCursor(0, 1);
    lcd.print("CO2=");
    lcd.print(co2);
    // εμφάνισε την υπολογισμένη ποσότητα tVOC στην οθόνη LCD
    lcd.print(" ");
    lcd.print("tVOC=");
    lcd.print(tvoc);
    lcd.print("          ");
  }


  // κάνε σύνδεση με το thingspeak για αποστολή των δεδομένων
  Serial.println("Starting connection to thingspeak...");
  // αν η σύνδεση ήταν επιτυχής,
  if( client.connect(server, 80) )
  {
    Serial.println("Connected to thingspeak.com");
    // δημιουργία του αιτήματος HTTP, όπως απαιτεί το thingspeak.com
    String request= "GET /update?key=";
    request += writeKey;      // Write API key
    request += "&field1=";    // field 1 για CO2
    request += String(co2);
    request += "&field2=";    // field 2 για TVOC
    request += String(tvoc);
    request += "&field3=";    // field 3 για θερμοκρασία
    request += String(tem);
    request += "&field4=";    // field για υγρασία
    request += String(hum);
    
    Serial.println(request);  // εμφάνιση στο monitor για debugging
    // αποστολή του αιτήματος
    client.println(request);
//    client.println("GET /asciilogo.txt HTTP/1.1");
    client.println("Host: 184.106.153.149");
    client.println("Connection: close");
    client.println();
  }

  // αν η θεμοκρασία είναι πάνω από 26 βαθμούς C, τότε άναψε τον ανεμιστήρα
  if( tem > 26.0 )
  {
    digitalWrite(INA, HIGH);
    digitalWrite(INB, LOW); 
  }
  else      // αλλιώς σβήσε τον
  {
    digitalWrite(INA, LOW);
    digitalWrite(INB, LOW);
  }
  
  // μια καθυστέρηση 5 sec
  delay(5000);
}
