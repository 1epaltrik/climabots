/*
 * Arduino IOT - Temperature (oC) and Humidity (%) on the website thingspeak.com
 * 
 * 
 * 
 *   Read basic CO2 and TVOCs

  Marshall Taylor @ SparkFun Electronics
  Nathan Seidle @ SparkFun Electronics

  April 4, 2017

  https://github.com/sparkfun/CCS811_Air_Quality_Breakout
  https://github.com/sparkfun/SparkFun_CCS811_Arduino_Library

  Read the TVOC and CO2 values from the SparkFun CSS811 breakout board

  This is the simplest example.  It throws away most error information and
  runs at the default 1 sample per second.

  A new sensor requires at 48-burn in. Once burned in a sensor requires
  20 minutes of run in before readings are considered good.

  Hardware Connections (Breakoutboard to Arduino):
  3.3V to 3.3V pin
  GND to GND pin
  SDA to A4
  SCL to A5

  Resources:
  Uses Wire.h for i2c operation

  Development environment specifics:
  Arduino IDE 1.8.1

  This code is released under the [MIT License](http://opensource.org/licenses/MIT).

  Please review the LICENSE.md file included with this example. If you have any questions
  or concerns with licensing, please contact techsupport@sparkfun.com.

  Distributed as-is; no warranty is given.
*/


// Emulate Serial1 on pins 6,7 if not present
#ifndef HAVE_HWSERIAL1
#include "SoftwareSerial.h"
SoftwareSerial Serial1(6, 7); // Σύνδεση ESP8266 με Arduino: ΤΧ->6, RX->7 
#endif

#include "WiFiEsp.h"
// Initialize the Ethernet client object
WiFiEspClient client;

// Κωδικοί WiFi
char ssid[] = "robotlab";     // WiFi SSID (name)
char pass[] = "robot2019";     // WiFi password
int status = WL_IDLE_STATUS;    // the WiFi radio's status

// IP του thingspeak.com
char server[] = "184.106.153.149";
// Write API Key του λογαριασμού στο thingspeak
char writeKey[] = "LY0NU8NMI0J8EEDY";

#include <Wire.h>
#include <LiquidCrystal.h>

#include "SparkFunCCS811.h" // Click here to get the library: http://librarymanager/All#SparkFun_CCS811
#define CCS811_ADDR 0x5B //Default I2C Address
//#define CCS811_ADDR 0x5A //Alternate I2C Address

CCS811 mySensor(CCS811_ADDR);
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

#include "DHT.h"
#define DHTPIN 13     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11   // DHT 11
DHT dht(DHTPIN, DHTTYPE);

void setup()
{
  dht.begin();
  
  // initialize serial for monitor
  Serial.begin(9600);
  // initialize serial for ESP module
  Serial1.begin(9600);
  // initialize ESP module
  WiFi.init(&Serial1);

  // check for the presence of the shield
  if( WiFi.status() == WL_NO_SHIELD )
  {
    Serial.println("WiFi shield not present");
    // don't continue
    while(true);
  }

  // attempt to connect to WiFi network
  while( WiFi.status() != WL_CONNECTED )
  {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network
    status = WiFi.begin(ssid, pass);
  }

  // you're connected now, so print out the data
  Serial.println("You're connected to the wifi");
  Serial.println();




  lcd.begin(16,2);
  lcd.setCursor(0, 0);
  lcd.print("1o EPAL TRIKALON");
  lcd.setCursor(0, 1);
  lcd.println("Gas Sensor & LCD");

  Wire.begin(); //Inialize I2C Harware

  //It is recommended to check return status on .begin(), but it is not
  //required.
//  CCS811Core::status returnCode = mySensor.begin();
  if( mySensor.begin() == false )
  {
    lcd.println("CCS811 Error...");
    while (1); //Hang if there was a problem.
  }

  
}


void loop()
{
  // if there are incoming bytes available
  // from the server, read them and print them
  while( client.available() )
  {
    char c = client.read();
    Serial.write(c);
  }

  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
/*  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.println(F("°C "));
*/
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Hum:");
  lcd.print((int)h);
  lcd.print(F("%-"));
  lcd.print(t);
  lcd.print(F("oC"));

  
  //Check to see if data is ready with .dataAvailable()
  if( mySensor.dataAvailable() )
  {
    //If so, have the sensor read and calculate the results.
    //Get them later
    mySensor.readAlgorithmResults();

    lcd.setCursor(0, 1);
    lcd.print("CO2=");
    //Returns calculated CO2 reading
    lcd.print(mySensor.getCO2());
//    lcd.print("          ");
//    lcd.setCursor(0, 1);    
    lcd.print(" ");
    lcd.print("tVOC=");
    //Returns calculated TVOC reading
    lcd.print(mySensor.getTVOC());
    lcd.print("          ");
  }

//  delay(500); //Don't spam the I2C bus



  // connect and send sensor data
  Serial.println("Starting connection to thingspeak...");
  // if you get a connection, report back via serial
  if( client.connect(server, 80) )
  {
    Serial.println("Connected to thingspeak.com");
    // Make an HTTP request
    String request= "GET /update?key=";
    request += writeKey;      // Write API key
    request += "&field1=";    // field 1 for CO2
    request += String(mySensor.getCO2());
    request += "&field2=";    // field 2 for TVOC
    request += String(mySensor.getTVOC());
    request += "&field3=";    // field 3 for temperature
    request += String(t);
    request += "&field4=";    // field 4 for humidity
    request += String(h);
    
    Serial.println(request);
    client.println(request);
//    client.println("GET /asciilogo.txt HTTP/1.1");
    client.println("Host: 184.106.153.149");
    client.println("Connection: close");
    client.println();
  }

  delay(5000);
}
